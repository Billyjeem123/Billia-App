 {"event":"charge.success","reference":"1751036174806jsq127amcexq7km","data":{"id":5094618198,"domain":"test","status":"success","reference":"1751036174806jsq127amcexq7km","amount":20000,"message":null,"gateway_response":"Approved","paid_at":"2025-06-27T14:56:15.000Z","created_at":"2025-06-27T14:56:15.000Z","channel":"dedicated_nuban","currency":"NGN","ip_address":null,"metadata":{"receiver_account_number":"1238342301","receiver_bank":"Test Bank","receiver_account_type":null,"custom_fields":[{"display_name":"Receiver Account","variable_name":"receiver_account_number","value":"1238342301"},{"display_name":"Receiver Bank","variable_name":"receiver_bank","value":"Test Bank"}]},"fees_breakdown":null,"log":null,"fees":200,"fees_split":null,"authorization":{"authorization_code":"AUTH_60noiyib45","bin":"008XXX","last4":"X553","exp_month":"05","exp_year":"2025","channel":"dedicated_nuban","card_type":"transfer","bank":null,"country_code":"NG","brand":"Managed Account","reusable":false,"signature":null,"account_name":null,"sender_country":"NG","sender_bank":null,"sender_bank_account_number":"XXXXXX4553","receiver_bank_account_number":"1238342301","receiver_bank":"Test Bank"},"customer":{"id":287554790,"first_name":"Juanita","last_name":"Blick","email":"hermina52@gmail.com","customer_code":"CUS_ewdtx2hwtxjmzny","phone":"529-943-0532","metadata":[],"risk_action":"default","international_format_phone":"+5299430532"},"plan":[],"subaccount":[],"split":[],"order_id":null,"paidAt":"2025-06-27T14:56:15.000Z","requested_amount":20000,"pos_transaction_data":null,"source":null}}


[
2025-06-27 14:56:18] local.INFO: Handling charge success for reference: 1751036174806jsq127amcexq7km
{"id":5094618198,"domain":"test","status":"success","reference":"1751036174806jsq127amcexq7km","amount":20000,"message":null,"gateway_response":"Approved","paid_at":"2025-06-27T14:56:15.000Z","created_at":"2025-06-27T14:56:15.000Z","channel":"dedicated_nuban","currency":"NGN","ip_address":null,"metadata":{"receiver_account_number":"1238342301","receiver_bank":"Test Bank","receiver_account_type":null,"custom_fields":[{"display_name":"Receiver Account","variable_name":"receiver_account_number","value":"1238342301"},{"display_name":"Receiver Bank","variable_name":"receiver_bank","value":"Test Bank"}]},"fees_breakdown":null,"log":null,"fees":200,"fees_split":null,"authorization":{"authorization_code":"AUTH_60noiyib45","bin":"008XXX","last4":"X553","exp_month":"05","exp_year":"2025","channel":"dedicated_nuban","card_type":"transfer","bank":null,"country_code":"NG","brand":"Managed Account","reusable":false,"signature":null,"account_name":null,"sender_country":"NG","sender_bank":null,"sender_bank_account_number":"XXXXXX4553","receiver_bank_account_number":"1238342301","receiver_bank":"Test Bank"},"customer":{"id":287554790,"first_name":"Juanita","last_name":"Blick","email":"hermina52@gmail.com","customer_code":"CUS_ewdtx2hwtxjmzny","phone":"529-943-0532","metadata":[],"risk_action":"default","international_format_phone":"+5299430532"},"plan":[],"subaccount":[],"split":[],"order_id":null,"paidAt":"2025-06-27T14:56:15.000Z","requested_amount":20000,"pos_transaction_data":null,"source":null}}


{
    "event": "charge.success",
    "reference": "BILLIA-TRNX-696006EL",
    "data": {
        "id": 5088987697,
        "domain": "test",
        "status": "success",
        "reference": "BILLIA-TRNX-696006EL",
        "amount": 100000,
        "message": null,
        "gateway_response": "Successful",
        "paid_at": "2025-06-25T20:45:49.000Z",
        "created_at": "2025-06-25T20:45:30.000Z",
        "channel": "card",
        "currency": "NGN",
        "ip_address": "197.211.63.166",
        "metadata": {
            "ip": "127.0.0.1",
            "user_id": "1",
            "user_email": "Nyasia_Klein68@hotmail.com",
            "receiver_account_number": "1238342301"
        },
        "fees_breakdown": null,
        "log": null,
        "fees": 1500,
        "fees_split": null,
        "authorization": {
            "authorization_code": "AUTH_o9y0se6qff",
            "bin": "408408",
            "last4": "4081",
            "exp_month": "12",
            "exp_year": "2030",
            "channel": "card",
            "card_type": "visa",
            "bank": "TEST BANK",
            "country_code": "NG",
            "brand": "visa",
            "reusable": true,
            "signature": "SIG_kZiILrg3gGLKiHFrl8Xj",
            "account_name": null,
            "receiver_bank_account_number": "1238342301",
            "receiver_bank": null
        },
        "customer": {
            "id": 287154283,
            "first_name": "Kay",
            "last_name": "Borer",
            "email": "nyasia_klein68@hotmail.com",
            "customer_code": "CUS_u2qw5mpewxvg5wc",
            "phone": "493-651-8507",
            "metadata": [],
            "risk_action": "default",
            "international_format_phone": "+4936518507"
        },
        "plan": [],
        "subaccount": [],
        "split": [],
        "order_id": null,
        "paidAt": "2025-06-25T20:45:49.000Z",
        "requested_amount": 100000,
        "pos_transaction_data": null,
        "source": {
            "type": "api",
            "source": "merchant_api",
            "entry_point": "transaction_initialize",
            "identifier": null
        }
    }
}




{
    "event": "charge.success",
    "reference": "BILLIA-TRNX-5028Q5IT",
    "data": {
        "id": 5095766047,
        "domain": "test",
        "status": "success",
        "reference": "BILLIA-TRNX-5028Q5IT",
        "amount": 100000,
        "message": null,
        "gateway_response": "Successful",
        "paid_at": "2025-06-28T01:52:39.000Z",
        "created_at": "2025-06-28T01:43:48.000Z",
        "channel": "card",
        "currency": "NGN",
        "ip_address": "197.211.63.105",
        "metadata": {
            "ip": "127.0.0.1",
            "user_id": "1",
            "user_email": "Nyasia_Klein68@hotmail.com"
        },
        "fees_breakdown": null,
        "log": null,
        "fees": 1500,
        "fees_split": null,
        "authorization": {
            "authorization_code": "AUTH_jzr2rcy9w3",
            "bin": "408408",
            "last4": "4081",
            "exp_month": "12",
            "exp_year": "2030",
            "channel": "card",
            "card_type": "visa",
            "bank": "TEST BANK",
            "country_code": "NG",
            "brand": "visa",
            "reusable": true,
            "signature": "SIG_kZiILrg3gGLKiHFrl8Xj",
            "account_name": null,
            "receiver_bank_account_number": null,
            "receiver_bank": null
        },
        "customer": {
            "id": 287154283,
            "first_name": "Kay",
            "last_name": "Borer",
            "email": "nyasia_klein68@hotmail.com",
            "customer_code": "CUS_u2qw5mpewxvg5wc",
            "phone": "493-651-8507",
            "metadata": [],
            "risk_action": "default",
            "international_format_phone": "+4936518507"
        },
        "plan": [],
        "subaccount": [],
        "split": [],
        "order_id": null,
        "paidAt": "2025-06-28T01:52:39.000Z",
        "requested_amount": 100000,
        "pos_transaction_data": null,
        "source": {
            "type": "api",
            "source": "merchant_api",
            "entry_point": "transaction_initialize",
            "identifier": null
        }
    }
}







    public function paystackWebhook(Request $request)
    {
        $data = $request->all();

        PaymentLogger::log('Paystack webhook', $data);
        $signature = $request->header('x-paystack-signature');

//        if (!$this->verifyWebhookSignature($data, $signature)) {
//            PaymentLogger::log('Invalid Paystack webhook signature', [
//                'payload' => $data,
//                'signature' => $signature
//            ]);
//        }

        # First try to find existing transaction
        $transaction = Transaction::query()
            ->where('external_reference', $data['data']['reference'])
            ->orWhere('reference', $data['data']['reference'])
            ->where('status', 'pending')
            ->where('provider', 'paystack')
            ->first();

        # Also check paystack_transactions table
        $paystackTransaction = PaystackTransaction::where('reference', $data['data']['reference'])
            ->orWhere('transaction_id', $transaction->id ?? null)
            ->first();

        if ($transaction->status === 'successful') {
            PaymentLogger::log('Transaction already processed: ' . $data['reference']);
            return null; // Prevent duplicate processing
        }

        # If no transaction found, check for virtual account
        if (!$transaction && isset($data['data']['metadata']['receiver_account_number'])) {
            $virtualAccount = VirtualAccount::where('account_number', $data['data']['metadata']['receiver_account_number'])->first();

            if ($virtualAccount) {
                $user = $virtualAccount->user;
                $wallet = $user->wallet;
                $amount = $data['data']['amount'] / 100;

             $transaction = TransactionLog::create([
                    'user_id' => $user->id,
                    'wallet_id' => $wallet->id,
                    'type' => 'credit',
                    'amount' => $amount,
                    'transaction_reference' => $data['data']['reference'],
                    'service_type' => 'Virtual Account Deposit',
                    'amount_after' => $wallet->amount + $amount,
                    'status' => $data['data']['status'] ?? "pending",
                    'provider' => 'paystack',
                    'channel' => $data['data']['channel'] ?? null,
                    'currency' => $data['data']['currency'] ?? 'NGN',
                    'description' => 'Transfer from ' . ($data['data']['authorization']['account_name'] ?? $data['data']['authorization']['sender_bank_account_number']),
                    'provider_response' => json_encode([
                        'customer' => $data['data']['customer'] ?? [],
                        'authorization' => $data['data']['authorization'] ?? [],
                    ]),
                ]);
            }
        }


        if (!$transaction && !$paystackTransaction) {
            PaymentLogger::log('Transaction not found for reference: ' . ($data['data']['reference'] ?? 'unknown'));
            return response('Transaction not found', 404);
        }

        # Create or update paystack_transaction record
        if (!$paystackTransaction) {
            $paystackTransaction = PaystackTransaction::create([
                'transaction_id' => $transaction->id,
                'reference' => $data['data']['reference'],
                'type' => $this->determineTransactionType($data['event']),
                'amount' => $data['data']['amount'] / 100,
                'currency' => $data['data']['currency'] ?? 'NGN',
                'fees' => ($data['data']['fees'] ?? 0) / 100,
                'channel' => $data['data']['channel'] ?? null,
                'status' => $this->mapPaystackStatus($data['data']['status']),
                'gateway_response' => $data['data']['gateway_response'] ?? null,
                'authorization_code' => $data['data']['authorization']['authorization_code'] ?? null,
                'card_details' => isset($data['data']['authorization']) ? json_encode($data['data']['authorization']) : null,
                'recipient_code' => $data['data']['recipient']['recipient_code'] ?? null,
                'bank_code' => $data['data']['recipient']['details']['bank_code'] ?? null,
                'account_number' => $data['data']['authorization']['sender_bank_account_number']['account_number'] ?? null,
                'account_name' => $data['data']['authorization']['account_name'] ?? null,
                'transfer_reason' => $data['data']['reason'] ?? null,
                'user_id' => $transaction?->user_id,
                'metadata' => json_encode($data['data']['metadata'] ?? []),
            ]);
        } else {
            # Update existing paystack transaction
            $paystackTransaction->update([
                'status' => $this->mapPaystackStatus($data['data']['status']),
                'gateway_response' => $data['data']['gateway_response'] ?? $paystackTransaction->gateway_response,
                'fees' => ($data['data']['fees'] ?? ($paystackTransaction->fees * 100)) / 100,
                'metadata' => json_encode(array_merge(json_decode($paystackTransaction->metadata ?? '[]', true), $data['data']['metadata'] ?? [])),
            ]);
        }

        PaymentLogger::log('Transaction and Paystack Transaction', [
            'transaction' => $transaction?->toArray(),
            'paystack_transaction' => $paystackTransaction->toArray()
        ]);

        # Handle different webhook events
        switch ($data['event']) {
            case 'charge.success':
                $this->chargeEvent($transaction, $paystackTransaction, $request);
                break;

            case 'transfer.success':
                $this->successfulTransfer($transaction, $paystackTransaction, $request);
                break;

            case 'transfer.failed':
                $this->failedTransfer($transaction, $paystackTransaction, $request);
                break;

            case 'transfer.reversed':
                $this->reversedTransfer($transaction, $paystackTransaction, $request);
                break;

            default:
                PaymentLogger::log('Unhandled webhook event: ' . $data['event']);
        }

        return response('Webhook processed successfully', 200);
    }

    private function determineTransactionType($event)
    {
        if (strpos($event, 'charge') !== false) {
            return 'payment';
        } elseif (strpos($event, 'transfer') !== false) {
            return 'transfer';
        }
        return 'payment';
    }

    private function mapPaystackStatus($paystackStatus)
    {
        $statusMap = [
            'success' => 'success',
            'failed' => 'failed',
            'abandoned' => 'failed',
            'pending' => 'pending',
            'reversed' => 'reversed',
        ];

        return $statusMap[$paystackStatus] ?? 'pending';
    }

    public function chargeEvent(TransactionLog $transaction = null, PaystackTransaction $paystackTransaction, $request)
    {
        $data = $request->all();

        if (!$transaction) {
            PaymentLogger::log('Trying to update paystack payment but transaction not found', $data);
            $this->fundCustomerAccount($request);
            return;
        }




        $wallet = $transaction->wallet;

        $settledAmount = $data['data']['amount'] / 100;
        $amountToBeCredited = $settledAmount;


        DB::transaction(function()use($transaction, $wallet, $amountToBeCredited, $settledAmount, $data, $paystackTransaction){

            $wallet->amount += $amountToBeCredited;
            $wallet->save();

            # Update main transaction
            $transaction->update([
                'status' => 'successful',
                'paid_at' => now(),
            ]);
            # Update paystack transaction
            $paystackTransaction->update([
                'status' => 'successful',
                'paid_at' => now(),
            ]);

        });

      PaymentLogger::log('Transactions status updated successfully', $transaction->toArray());


    }

    public function successfulTransfer(Transaction $transaction = null, PaystackTransaction $paystackTransaction, $request)
    {
        if (!$transaction) {
            PaymentLogger::log('Transfer success but no main transaction found');
            return;
        }

        # Update main transaction
        $transaction->update([
            'status' => 'successful',
            'paid_at' => now(),
        ]);

        # Update paystack transaction
        $paystackTransaction->update([
            'status' => 'successful',
            'paid_at' => now(),
        ]);



        PaymentLogger::log('Transfer success processed', [
            'transaction_id' => $transaction->id,
            'paystack_transaction_id' => $paystackTransaction->id
        ]);
    }

    public function failedTransfer(Transaction $transaction = null, PaystackTransaction $paystackTransaction, $request)
    {
        if (!$transaction) {
            PaymentLogger::log('Transfer failed but no main transaction found');
            return;
        }

        DB::transaction( function() use ($transaction, $paystackTransaction) {
            # Refund wallet balance if it was debited
            if ($transaction->type === 'debit' && $transaction->payable_type === 'App\\Models\\Wallet') {
                $wallet = $transaction->payable;
                if ($wallet) {
                    $wallet->increment('amount', $transaction->amount);
                }
            }

            # Update main transaction
            $transaction->update([
                'status' => 'failed',
                'failed_at' => now(),
            ]);

            # Update paystack transaction
            $paystackTransaction->update([
                'status' => 'failed',
                'failed_at' => now(),
            ]);
        });

        # Send notification email
//        if ($transaction->user) {
//            Mail::to($transaction->user)->send(new UnSuccessfulTransaction($transaction->user));
//        }

        PaymentLogger::log('Failed transfer processed', [
            'transaction_id' => $transaction->id,
            'paystack_transaction_id' => $paystackTransaction->id
        ]);
    }

    public function reversedTransfer(Transaction $transaction = null, PaystackTransaction $paystackTransaction, $request)
    {
        if (!$transaction) {
            PaymentLogger::log('Transfer reversed but no main transaction found');
            return;
        }

        DB::transaction(function() use ($transaction, $paystackTransaction) {
            # Refund wallet balance if it was debited
            if ($transaction->type === 'debit' && $transaction->payable_type === 'App\\Models\\Wallet') {
                $wallet = $transaction->payable;
                if ($wallet) {
                    $wallet->increment('amount', $transaction->amount);
                }
            }

            # Update main transaction
            $transaction->update([
                'status' => 'reversed',
            ]);

            # Update paystack transaction
            $paystackTransaction->update([
                'status' => 'reversed',
            ]);
        });

        PaymentLogger::log('Reversed transfer processed', [
            'transaction_id' => $transaction->id,
            'paystack_transaction_id' => $paystackTransaction->id
        ]);
    }


    public function fundCustomerAccount(Request $request)
    {
        $data = $request->all();

        if (isset($data['data']['metadata']['receiver_account_number'])) {
            $accountNumber = $data['data']['metadata']['receiver_account_number'];
            $virtualAccount = VirtualAccount::where('account_number', $accountNumber)->first();

            if (!$virtualAccount?->exists()) {
                PaymentLogger::log("Trying to fund an account that does not exist", ["accountNumber" => $accountNumber]);
                return;
            }

            if ($data['event'] == 'charge.success') {
                $amount = $data['data']['amount'] / 100;

               #  Create main transaction record using your database fields
                $transaction = Transaction::create([
                    'amount' => $amount,
                    'currency' => $data['data']['currency'] ?? 'NGN',
                    'description' => 'Virtual account top-up via bank transfer',
                    'status' => 'success',
                    'purpose' => 'transfer',
                    'paystack_customer_id' => $virtualAccount->paystack_customer_id ?? null,
                    'user_id' => $virtualAccount->user_id,
                    'metadata' => json_encode([
                        'virtual_account_number' => $accountNumber,
                        'funding_source' => 'bank_transfer',
                        'original_webhook_data' => $data['data']
                    ]),
                    'payable_type' => 'App\\Models\\Wallet',#  Assuming wallet model
                    'payable_id' => $virtualAccount->wallet_id,
                    'provider' => 'paystack',
                    'reference' => Utility::txRef("transfer", 'paystack'),
                    'external_reference' => $data['data']['reference'],
                    'channel' => $data['data']['channel'] ?? 'bank_transfer',
                    'paid_at' => now(),
                    'type' => 'credit',
                ]);

               #  Create corresponding paystack_transactions record
                $paystackTransaction = PaystackTransaction::create([
                    'transaction_id' => $data['data']['id'],
                    'reference' => $data['data']['reference'],
                    'type' => 'payment',
                    'amount' => $amount,
                    'currency' => $data['data']['currency'] ?? 'NGN',
                    'fees' => ($data['data']['fees'] ?? 0) / 100,
                    'channel' => $data['data']['channel'] ?? 'bank_transfer',
                    'status' => 'success',
                    'gateway_response' => $data['data']['gateway_response'] ?? 'Successful',
                    'authorization_code' => $data['data']['authorization']['authorization_code'] ?? null,
                    'card_details' => isset($data['data']['authorization']) ? json_encode($data['data']['authorization']) : null,
                    'user_id' => $virtualAccount->user_id,
                    'paid_at' => now(),
                    'metadata' => json_encode([
                        'virtual_account_number' => $accountNumber,
                        'customer_data' => $data['data']['customer'] ?? null,
                        'original_metadata' => $data['data']['metadata'] ?? []
                    ]),
                ]);

               #  Update wallet balance
                $wallet = $virtualAccount->wallet;
                if ($wallet) {
                    PaymentLogger::log('Wallet before update', [
                        'wallet_id' => $wallet->id,
                        'current_balance' => $wallet->amount,
                        'amount_to_add' => $amount
                    ]);

                    $wallet->amount += $amount;
                    $wallet->save();

                    PaymentLogger::log('Wallet after update', [
                        'wallet_id' => $wallet->id,
                        'new_balance' => $wallet->amount,
                        'amount_added' => $amount
                    ]);
                }

               #  Send notification email if user exists
//                if ($virtualAccount->user) {
//                    try {
//                        Mail::to($virtualAccount->user)->send(new SuccessfulTransaction($virtualAccount->user, $transaction));
//                    } catch (\Exception $e) {
//                        PaymentLogger::log('Failed to send notification email', [
//                            'user_id' => $virtualAccount->user_id,
//                            'transaction_id' => $transaction->id,
//                            'error' => $e->getMessage()
//                        ]);
//                    }
//                }

                PaymentLogger::log('Transaction created successfully - virtual account funding', [
                    'transaction_id' => $transaction->id,
                    'paystack_transaction_id' => $paystackTransaction->id,
                    'amount' => $amount,
                    'currency' => $data['data']['currency'] ?? 'NGN',
                    'virtual_account' => $accountNumber,
                    'user_id' => $virtualAccount->user_id
                ]);

                return [
                    'transaction' => $transaction,
                    'paystack_transaction' => $paystackTransaction,
                    'wallet_updated' => true
                ];
            }
        }

        PaymentLogger::log('Invalid webhook data for funding customer account', [
            'event' => $data['event'] ?? 'unknown',
            'has_metadata' => isset($data['data']['metadata']),
            'has_account_number' => isset($data['data']['metadata']['receiver_account_number'])
        ]);

        return null;
    }




{
    "event": "transfer.failed",
    "reference": "BILLIA-BKTRF-6352V5JJ",
    "data": {
        "amount": 20000,
        "createdAt": "2025-07-01T10:39:14.000Z",
        "currency": "NGN",
        "domain": "test",
        "failures": null,
        "id": 842189621,
        "integration": {
            "id": 1468728,
            "is_live": true,
            "business_name": "SMARTROB TECHNOLOGIES LIMITED",
            "logo_path": "https://public-files-paystack-prod.s3.eu-west-1.amazonaws.com/integration-logos/paystack.jpg"
        },
        "reason": "Test transfer",
        "reference": "BILLIA-BKTRF-6352V5JJ",
        "source": "balance",
        "source_details": null,
        "status": "success",
        "titan_code": null,
        "transfer_code": "TRF_7n321ehbnk7if4aw",
        "transferred_at": null,
        "updatedAt": "2025-07-01T10:39:14.000Z",
        "recipient": {
            "active": true,
            "createdAt": "2025-06-28T03:05:34.000Z",
            "currency": "NGN",
            "description": null,
            "domain": "test",
            "email": null,
            "id": 106553645,
            "integration": 1468728,
            "metadata": null,
            "name": "Test Recipient",
            "recipient_code": "RCP_rvmrioqz1mine61",
            "type": "nuban",
            "updatedAt": "2025-06-28T03:05:34.000Z",
            "is_deleted": false,
            "details": {
                "authorization_code": null,
                "account_number": "3146614382",
                "account_name": "BILLYHADIAT TAOFEEQ OLADEJI",
                "bank_code": "011",
                "bank_name": "First Bank of Nigeria"
            }
        },
        "session": {
            "provider": null,
            "id": null
        },
        "fee_charged": 0,
        "gateway_response": null
    }
}

{
  "code": 201,
  "data": {
    "message": "Card created successfully",
    "card": {
      "securityCode": "004",
      "expiration": "0728",
      "currency": "USD",
      "status": "active",
      "isPhysical": false,
      "title": "GCP Services",
      "color": "blue",
      "name": "Stone Atwine",
      "balance": 2.1,
      "createdAt": "2025-07-02T23:24:50.987Z",
      "updatedAt": "2025-07-02T23:24:57.722Z",
      "id": "95a39c2b-6496-439f-340e-08ddb7700091",
      "brand": "Visa",
      "mask": "428836******8965",
      "number": "4288360047468965",
      "ownerId": "CUI769",
      "lastUsedOn": "2025-07-02T23:24:57.722Z",
      "isNonSubscription": false,
      "billingAddress": {
        "address": "447 Broadway, 2nd Floor",
        "city": "New York",
        "state": "NY",
        "zipCode": "10013",
        "country": "US"
      }
    }
  },
  "success": true
}


{
    "success": true,
    "data": {
        "code": 201,
        "data": {
            "message": "Card created successfully",
            "card": {
                "securityCode": "056",
                "expiration": "0728",
                "currency": "USD",
                "status": "active",
                "isPhysical": false,
                "title": "My first card",
                "color": "Blue",
                "name": "John Doe",
                "balance": 1.1,
                "createdAt": "2025-07-03T00:25:51.039Z",
                "updatedAt": "2025-07-03T00:25:59.746Z",
                "id": "b7620bce-04cc-444d-3458-08ddb7700091",
                "brand": "Visa",
                "mask": "485997******1469",
                "number": "4859970002321469",
                "ownerId": "CUI776",
                "lastUsedOn": "2025-07-03T00:25:59.746Z",
                "isNonSubscription": false,
                "billingAddress": {
                    "address": "447 Broadway, 2nd Floor",
                    "city": "New York",
                    "state": "NY",
                    "zipCode": "10013",
                    "country": "US"
                }
            }
        },
        "success": true
    },
    "status_code": 200
}{
    "status": false,
    "message": "Card data missing from API response.",
    "data": [],
    "status_code": 500
}




